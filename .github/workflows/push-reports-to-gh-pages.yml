name: Reusable workflow - Push reports to gh-pages branch

on:
  workflow_call:
    inputs:
      reports-to-push:
        description: 'Reports to be pushed to the gh-pages branch'
        required: true
        type: string
      comment-title:
        description: 'Pull request comment title'
        required: false
        default: 'Test reports'
        type: string

concurrency:
  group: gh-pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  push-reports-to-gh-pages-branch:
    name: Push reports to gh-pages branch
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages

      - name: Set the environment variables
        shell: bash
        run: |
          echo "branch_name=${{ github.head_ref || github.ref_name }}" >> $GITHUB_ENV
          echo "sha_short=$(git rev-parse --short ${{ github.event.pull_request.head.sha }})" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}

      - name: Commit reports to the gh-pages branch
        shell: bash
        run: |
          mkdir -p reports/${{ env.branch_name }}
          rm -rf -- reports/${{ env.branch_name }}

          echo '${{ inputs.reports-to-push }}' | jq -r 'to_entries[] | "\(.value)"' | while read path; do
            echo $path
            echo ${{ env.branch_name }}
            echo ${{ github.workspace }}/artifacts/$path
            echo reports/${{ env.branch_name }}
            cp -R ${{ github.workspace }}/artifacts/$path reports/${{ env.branch_name }}
          done

          git config user.name github-actions
          git config user.email github-actions@github.com
          git status
          git add reports/*
          git commit --amend -am "Adding ${{ env.branch_name }} branch reports." || true
          
          retry=0
          max_retries=5
          retry_interval=15

          while ! (git push --force-with-lease) && [[ $retry -lt $max_retries ]]
          do
            (( retry++ ))
            echo "Retrying [${retry}/${max_retries}] in ${retry_interval}(s)"
            sleep ${retry_interval}
            git reset --soft HEAD@{1}
            git stash
            git pull --rebase
            git stash pop
            git add reports/*
            git commit --amend -am "Adding ${{ env.branch_name }} branch reports." || true
          done

      - name: Delete downloaded artifacts
        if: always()
        shell: bash
        run: |
          rm -rf -- ${{ github.workspace }}/artifacts

      - name: Comment report details on the pull request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            function generateComment() {
              let commentBody = "";
              const reportObj = JSON.parse(`${{ inputs.reports-to-push }}`);
              
              for (const key in reportObj) {
                commentBody += `- [${key}](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/${{ env.branch_name }}/${reportObj[key]})\n`;
              }

              return `## ${{ inputs.comment-title }}\n\nCommit: ${{ env.sha_short }}\n\n${commentBody}`;
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number
            });
            const githubActionBotUser = await github.rest.users.getByUsername({ username: 'github-actions[bot]' });
            const botComment = comments.find(comment => comment.user.id === githubActionBotUser.data.id && comment.body.includes(`## ${{ inputs.comment-title }}`));
            const comment = generateComment();

            if(botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: `${comment}\n:recycle: This comment has been updated with latest results.`
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.number,
                body: comment
              });
            }
