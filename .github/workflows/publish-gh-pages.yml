name: Reusable workflow - Publish gh-pages

on:
  workflow_call:
    inputs:
      artifacts-to-publish:
        description: 'Artifacts to be published to gh-pages'
        required: true
        type: string
      comment-title:
        description: 'Comment title'
        required: false
        default: 'Test reports'
        type: string

concurrency:
  group: gh-pages-${{ github.ref }}

jobs:
  publish-gh-pages:
    name: Publish artifacts to gh-pages
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages

      - name: Set the environment variables
        shell: bash
        run: |
          echo "branch_name=${{ github.head_ref || github.ref_name }}" >> $GITHUB_ENV
          echo "sha_short=$(git rev-parse --short ${{ github.event.pull_request.head.sha }})" >> $GITHUB_ENV
          sleep 2m

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: reports
          path: ${{ github.workspace }}/artifacts

      - name: Commit reports to gh-pages branch
        shell: bash
        run: |
          echo "github.ref = ${{ github.ref }}"
          echo "github.workspace = ${{ github.workspace }}"
          echo "env.branch_name = ${{ env.branch_name }}"

          mkdir -p reports/${{ env.branch_name }}
          cd reports/${{ env.branch_name }}
          
          rm -rf -- *

          echo '${{ inputs.artifacts-to-publish }}' | sed 's/\\//g' | jq -r 'to_entries[] | "\(.value)"' | while read path; do
            cp -R ${{ github.workspace }}/artifacts/$path .
          done
          
          git config user.name github-actions
          git config user.email github-actions@github.com
         
          cd ../..
          git add reports/*
          git commit --amend -am ${{ env.branch_name }} || true
          
          while !(git push --force-with-lease)
          do
            echo "Resetting last commit"
            git reset --soft HEAD@{1}
            echo "Stashing staged changes"
            git stash
            echo "Rebasing"
            git pull --rebase
            echo "Applying stash"
            git stash pop
            echo "Staging changes"
            git add reports/*
            echo "Committing changes"
            git commit --amend -am ${{ env.branch_name }} || true
          done

      - name: Delete downloaded artifacts
        if: always()
        shell: bash
        run: |
          rm -rf -- ${{ github.workspace }}/artifacts

      - name: Comment report details on pull request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            function generateComment() {
              let commentBody = "";
              const artifactsObj = JSON.parse(`${{ inputs.artifacts-to-publish }}`);
              
              for (const key in artifactsObj) {
                commentBody += `- [${key}](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/${{ env.branch_name }}/${artifactsObj[key]})\n`;
              }

              return `## ${{ inputs.comment-title }}\n\nCommit: ${{ env.sha_short }}\n\n${commentBody}`;
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number
            });
            
            const githubActionBotUser = await github.rest.users.getByUsername({ username: 'github-actions[bot]' });
            
            const botComment = comments.find(comment => comment.user.id === githubActionBotUser.data.id && comment.body.includes(`## ${{ inputs.comment-title }}`));
            
            if(botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: `${generateComment()}\n:recycle: This comment has been updated with latest results.`
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.number,
                body: generateComment()
              });
            }
