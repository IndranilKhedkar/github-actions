name: Publish gh-pages

description: 'Action to publish reports to gh-pages'

inputs:
  artifacts:
    description: 'Artifacts to be published to gh-pages'
    required: true
  comment-title:
    description: 'Comment title'
    required: false
    default: 'Test reports'

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [ -z "${{ inputs.artifacts }}" ]
        then
          echo "artifacts must be provided";
          exit 1;
        fi

        echo "github.ref_name ${{ github.ref_name }}"
        echo "github.repository ${{ github.repository }}"
        echo "github.ref_type ${{ github.ref_type }}"
        echo "github.ref ${{ github.ref }}"
        echo "github.head_ref ${{ github.head_ref }}"
        echo "github.base_ref ${{ github.base_ref }}"
        echo "github.event_name ${{ github.event_name }}"
        echo "github.action_repository ${{ github.action_repository }}"
        echo "github.repository_owner ${{ github.repository_owner }}"
        echo "github.repository_owner_id ${{ github.repository_owner_id }}"
        echo "github.server_url ${{ github.server_url }}"
        echo "github.sha ${{ github.sha }}"
        echo "github.workspace ${{ github.workspace }}"

    - name: Build publish artifacts
      shell: bash
      run: |
        ls -R .
        
        echo '${{ inputs.artifacts }}' | jq -r 'to_entries[] | "\(.value)"' | while read report_path; do
          cp -R $report_path ~/artifacts/reports/
        done

        ls -R ~/artifacts/reports/

    - name: Checkout gh-pages branch
      uses: actions/checkout@v3
      with:
        ref: gh-pages

    # - name: Download artifacts
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: reports
    #     path: artifacts/reports

    - name: Set the environment variables
      shell: bash
      run: |
        echo "branch_name=${{ github.head_ref || github.ref_name }}" >> $GITHUB_ENV
        echo "sha_short=$(git rev-parse --short ${{ github.event.pull_request.head.sha }})" >> $GITHUB_ENV

    - name: Commit reports
      shell: bash
      run: |
        mkdir -p reports/${{ env.branch_name }}
        cd reports/${{ env.branch_name }}
        
        rm -rf -- *

        echo '${{ inputs.artifacts }}' | jq -r 'to_entries[] | "\(.value)"' | while read report_path; do
          cp -R ${{ github.workspace }}/artifacts/reports/$report_path .
        done
        
        rm -rf -- ${{ github.workspace }}/artifacts/
        
        git config user.name github-actions
        git config user.email github-actions@github.com
        git status
        git add .
        git commit -am ${{ env.branch_name }} || true
        git push --force

    - name: Comment report details on pull request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          function generateComment() {
            let commentBody = "";
            const artifactsObj = JSON.parse(`${{ inputs.artifacts }}`);
            
            for (const key in artifactsObj) {
              commentBody += `- [${key}](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/${{ env.branch_name }}/${artifactsObj[key]})\n`;
            }

            return `## ${{ inputs.comment-title }}\n\nCommit: ${{ env.sha_short }}\n\n${commentBody}`;
          }

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.number
          });

          const githubActionBotUser = await github.rest.users.getByUsername({ username: 'github-actions[bot]' });
          
          const botComment = comments.find(comment => comment.user.id === githubActionBotUser.data.id && comment.body.includes(`## ${{ inputs.comment-title }}`));
          
          if(botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: `${generateComment()}\n\n:recycle: This comment has been updated with latest results.`
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
              body: generateComment()
            });
          }
